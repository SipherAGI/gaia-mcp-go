name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is-prerelease: ${{ steps.validate.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate semantic version
        id: validate
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if it's a pre-release (contains -, like 1.0.0-alpha.1)
          if [[ "$VERSION" == *-* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

          # Validate semver format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid semantic version format: $VERSION"
            exit 1
          fi

  goreleaser:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: stable

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-version.outputs.version }}';
            const isPrerelease = '${{ needs.validate-version.outputs.is-prerelease }}' === 'true';

            // Get the release
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${version}`
            });

            // Update release with proper pre-release flag
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              prerelease: isPrerelease
            });
